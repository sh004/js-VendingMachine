//----- Ç®ã‡ìäì¸,ë}ì¸èàóù -----//
var gDragged;
var gDeltaX, gDeltaY;
var gOrgX, gOrgY;
var gDraggedId;
var gDropId;

function addEvent( elm, evtType, fn, useCapture) {
	if (elm.addEventListener) {
		elm.addEventListener(evtType, fn, useCapture);
		return true;
	}
	else if (elm.attachEvent) {
		var r = elm.attachEvent('on' + evtType, fn);
		return r;
	}
	else {
		elm['on'+evtType] = fn;
	}
}

function removeEvent( elm, evtType, fn, useCapture) {
	if (elm.removeEventListener) {
		elm.removeEventListener(evtType, fn, useCapture);
		return true;
	}
	else if (elm.detachEvent) {
		var r = elm.detachEvent('on' + evtType, fn);
		return r;
	}
	else {
		elm['on'+evtType] = fn;
	}
}

function setCursor ( elm, curtype ) {
	elm.style.cursor = curtype;
}

function setOpacity(node,val) {
	if (node.filters) {
		try {
			node.filters["alpha"].opacity = val*100;
		}
		catch (e) {
		}
	} else if (node.style.opacity) {
		node.style.opacity = val;
	}
}

function getAttrValue ( elm, attrname ) {
	return elm.attributes[ attrname ].nodeValue;
}

function getX ( elm ) {
	return parseInt(elm.style.left);
}

function getY ( elm ) {
	return parseInt(elm.style.top);
}

function getEventX ( evt ) {
	return evt.pageX ? evt.pageX : evt.clientX;
}

function getEventY ( evt ) {
	return evt.pageY ? evt.pageY : evt.clientY;
}

function getWidth ( elm ) {
	return parseInt( elm.style.width );
}

function getHeight ( elm ) {
	return parseInt( elm.style.height );
}

function moveElm ( elm, x, y ) {
	elm.style.left = x + 'px';
	elm.style.top = y + 'px';
}

function onMouseDown (evt) {
	var target = evt.target ? evt.target : evt.srcElement;
	var x = getEventX ( evt );
	var y = getEventY ( evt );

	gDragged = target;

	gDeltaX = x - getX(gDragged);
	gDeltaY = y - getY(gDragged);

	gDraggedId = getAttrValue ( gDragged, 'did' );
	setCursor ( gDragged, 'move' );

	gOrgX = getX ( gDragged );
	gOrgY = getY ( gDragged );

	setOpacity ( gDragged, 0.6 );

	addEvent ( document, 'mousemove', onMouseMove, false );
	addEvent ( document, 'mouseup', onMouseUp, false );
}

function onMouseMove(evt) {
	var x = getEventX ( evt );
	var y = getEventY ( evt );

	moveElm ( gDragged, x - gDeltaX, y - gDeltaY );
}

function onMouseUp(evt) {
	setOpacity( gDragged, 1);
	setCursor ( gDragged, 'default' );

	removeEvent ( document, 'mousemove', onMouseMove, false );
	removeEvent ( document, 'mouseup', onMouseUp, false );

	if ( isOnDropTarget (evt) ) {
		onDropped(evt);
	}
	else {
		moveElm ( gDragged, gOrgX, gOrgY );
	}
}

function isOnDropTarget ( evt ) {
	var all_divs = document.getElementsByTagName('div');

	for ( var i=0; i<all_divs.length; i++ ) {
		if ( isEventOnElm ( evt, all_divs[i].id ) ) {
			if ( all_divs[i].attributes['tid'] ) {
				gDropId = getAttrValue ( all_divs[i], 'tid' );
				return true;
			}
		}
	}
	return false;
}

function isEventOnElm (evt, money_id) {
	var evtX = getEventX(evt);
	var evtY = getEventY(evt);

	var drop_target = document.getElementById( money_id );

	var x = getX ( drop_target );
	var y = getY ( drop_target );

	var width = getWidth ( drop_target );
	var height = getHeight ( drop_target );

	return evtX > x && evtY > y && evtX < x + width && evtY < y + height;
}

function onDropped ( evt ) {
	alert('Dropped! Dragged: [' + gDraggedId + '] Dropped at: [' + gDropId + ']');
}

function init () {
	document.body.ondrag = function () { return false; };
	document.body.onselectstart = function () { return false; };

	var all_elms = document.getElementsByTagName ( 'div' );

	for ( var i = 0; i < all_elms.length; i++ ) {
		if ( getAttrValue ( all_elms[i], 'class' ) == 'money' ) {
			addEvent ( all_elms[i], 'mousedown', onMouseDown, false );
		}
	}
}

addEvent ( window, 'load', init, false );